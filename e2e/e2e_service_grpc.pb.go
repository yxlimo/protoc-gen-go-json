// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package e2e

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// E2EClient is the client API for E2E service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type E2EClient interface {
	Hello(ctx context.Context, in *Basic, opts ...grpc.CallOption) (*Basic, error)
}

type e2EClient struct {
	cc grpc.ClientConnInterface
}

func NewE2EClient(cc grpc.ClientConnInterface) E2EClient {
	return &e2EClient{cc}
}

func (c *e2EClient) Hello(ctx context.Context, in *Basic, opts ...grpc.CallOption) (*Basic, error) {
	out := new(Basic)
	err := c.cc.Invoke(ctx, "/e2e.E2E/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// E2EServer is the server API for E2E service.
// All implementations should embed UnimplementedE2EServer
// for forward compatibility
type E2EServer interface {
	Hello(context.Context, *Basic) (*Basic, error)
}

// UnimplementedE2EServer should be embedded to have forward compatible implementations.
type UnimplementedE2EServer struct {
}

func (UnimplementedE2EServer) Hello(context.Context, *Basic) (*Basic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}

// UnsafeE2EServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to E2EServer will
// result in compilation errors.
type UnsafeE2EServer interface {
	mustEmbedUnimplementedE2EServer()
}

func RegisterE2EServer(s grpc.ServiceRegistrar, srv E2EServer) {
	s.RegisterService(&E2E_ServiceDesc, srv)
}

func _E2E_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Basic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2EServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2e.E2E/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2EServer).Hello(ctx, req.(*Basic))
	}
	return interceptor(ctx, in, info, handler)
}

// E2E_ServiceDesc is the grpc.ServiceDesc for E2E service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var E2E_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "e2e.E2E",
	HandlerType: (*E2EServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _E2E_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "e2e/e2e_service.proto",
}
